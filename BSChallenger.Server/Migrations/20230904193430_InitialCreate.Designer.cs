// <auto-generated />
using System;
using BSChallenger.Server.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BSChallenger.Server.Migrations
{
    [DbContext(typeof(Database))]
    [Migration("20230904193430_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BSChallenger.Server.Models.API.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("IconURL")
                        .HasColumnType("text");

                    b.Property<int>("LevelNumber")
                        .HasColumnType("integer");

                    b.Property<int>("MapsReqForPass")
                        .HasColumnType("integer");

                    b.Property<int>("RankingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RankingId");

                    b.ToTable("Level");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Maps.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Characteristic")
                        .HasColumnType("text");

                    b.Property<string>("Difficulty")
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<int>("LevelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.ToTable("Map");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Maps.MapFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<int?>("MapId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("MapFeature");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Rankings.RankTeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RankingId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RankingId");

                    b.HasIndex("UserId");

                    b.ToTable("RankTeamMember");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Rankings.Ranking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("IconURL")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("Partnered")
                        .HasColumnType("boolean");

                    b.Property<bool>("Private")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Rankings");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Rankings.ScanHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RankingId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RankingId");

                    b.ToTable("ScanHistory");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Users.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TokenType")
                        .HasColumnType("integer");

                    b.Property<string>("TokenValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BeatLeaderId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastCheckDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Level", b =>
                {
                    b.HasOne("BSChallenger.Server.Models.API.Rankings.Ranking", "Ranking")
                        .WithMany("Levels")
                        .HasForeignKey("RankingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ranking");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Maps.Map", b =>
                {
                    b.HasOne("BSChallenger.Server.Models.API.Level", "Level")
                        .WithMany("AvailableForPass")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Maps.MapFeature", b =>
                {
                    b.HasOne("BSChallenger.Server.Models.API.Maps.Map", null)
                        .WithMany("Features")
                        .HasForeignKey("MapId");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Rankings.RankTeamMember", b =>
                {
                    b.HasOne("BSChallenger.Server.Models.API.Rankings.Ranking", "Ranking")
                        .WithMany("RankTeamMembers")
                        .HasForeignKey("RankingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BSChallenger.Server.Models.API.Users.User", "User")
                        .WithMany("AssignedRankings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ranking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Rankings.ScanHistory", b =>
                {
                    b.HasOne("BSChallenger.Server.Models.API.Rankings.Ranking", "Ranking")
                        .WithMany("History")
                        .HasForeignKey("RankingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ranking");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Users.Token", b =>
                {
                    b.HasOne("BSChallenger.Server.Models.API.Users.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Level", b =>
                {
                    b.Navigation("AvailableForPass");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Maps.Map", b =>
                {
                    b.Navigation("Features");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Rankings.Ranking", b =>
                {
                    b.Navigation("History");

                    b.Navigation("Levels");

                    b.Navigation("RankTeamMembers");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Users.User", b =>
                {
                    b.Navigation("AssignedRankings");

                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
