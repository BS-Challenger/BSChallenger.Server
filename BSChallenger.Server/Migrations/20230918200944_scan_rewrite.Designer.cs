// <auto-generated />
using System;
using BSChallenger.Server.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BSChallenger.Server.Migrations
{
    [DbContext(typeof(Database))]
    [Migration("20230918200944_scan_rewrite")]
    partial class scan_rewrite
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BSChallenger.Server.Models.API.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<string>("IconURL")
                        .HasColumnType("text")
                        .HasColumnName("icon_url");

                    b.Property<int>("LevelNumber")
                        .HasColumnType("integer")
                        .HasColumnName("level_number");

                    b.Property<int>("MapsReqForPass")
                        .HasColumnType("integer")
                        .HasColumnName("maps_req_for_pass");

                    b.Property<int>("RankingId")
                        .HasColumnType("integer")
                        .HasColumnName("ranking_id");

                    b.Property<string>("RequiredCategoryData")
                        .HasColumnType("text")
                        .HasColumnName("required_category_data");

                    b.HasKey("Id")
                        .HasName("pk_level");

                    b.HasIndex("RankingId")
                        .HasDatabaseName("ix_level_ranking_id");

                    b.ToTable("level", (string)null);
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Maps.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Characteristic")
                        .HasColumnType("text")
                        .HasColumnName("characteristic");

                    b.Property<string>("Difficulty")
                        .HasColumnType("text")
                        .HasColumnName("difficulty");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<int>("LevelId")
                        .HasColumnType("integer")
                        .HasColumnName("level_id");

                    b.HasKey("Id")
                        .HasName("pk_map");

                    b.HasIndex("LevelId")
                        .HasDatabaseName("ix_map_level_id");

                    b.ToTable("map", (string)null);
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Maps.MapFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Data")
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<int?>("MapId")
                        .HasColumnType("integer")
                        .HasColumnName("map_id");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_map_feature");

                    b.HasIndex("MapId")
                        .HasDatabaseName("ix_map_feature_map_id");

                    b.ToTable("map_feature", (string)null);
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Rankings.RankTeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RankingId")
                        .HasColumnType("integer")
                        .HasColumnName("ranking_id");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_rank_team_member");

                    b.HasIndex("RankingId")
                        .HasDatabaseName("ix_rank_team_member_ranking_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_rank_team_member_user_id");

                    b.ToTable("rank_team_member", (string)null);
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Rankings.Ranking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActiveUsers")
                        .HasColumnType("integer")
                        .HasColumnName("active_users");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<string>("IconURL")
                        .HasColumnType("text")
                        .HasColumnName("icon_url");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("Partnered")
                        .HasColumnType("boolean")
                        .HasColumnName("partnered");

                    b.Property<bool>("Private")
                        .HasColumnType("boolean")
                        .HasColumnName("private");

                    b.Property<int>("WeeklyScans")
                        .HasColumnType("integer")
                        .HasColumnName("weekly_scans");

                    b.HasKey("Id")
                        .HasName("pk_rankings");

                    b.ToTable("rankings", (string)null);
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Scan.ScanHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_scan_history");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_scan_history_user_id");

                    b.ToTable("scan_history", (string)null);
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Scan.ScoreData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("Accuracy")
                        .HasColumnType("real")
                        .HasColumnName("accuracy");

                    b.Property<int?>("MapId")
                        .HasColumnType("integer")
                        .HasColumnName("map_id");

                    b.Property<string>("Modifiers")
                        .HasColumnType("text")
                        .HasColumnName("modifiers");

                    b.Property<bool>("Passed")
                        .HasColumnType("boolean")
                        .HasColumnName("passed");

                    b.Property<int>("ScanHistoryId")
                        .HasColumnType("integer")
                        .HasColumnName("scan_history_id");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.HasKey("Id")
                        .HasName("pk_score_data");

                    b.HasIndex("MapId")
                        .HasDatabaseName("ix_score_data_map_id");

                    b.HasIndex("ScanHistoryId")
                        .HasDatabaseName("ix_score_data_scan_history_id");

                    b.ToTable("score_data", (string)null);
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("BeatLeaderId")
                        .HasColumnType("text")
                        .HasColumnName("beat_leader_id");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<string>("DiscordId")
                        .HasColumnType("text")
                        .HasColumnName("discord_id");

                    b.Property<DateTime>("LastScanDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_scan_date");

                    b.Property<string>("Platform")
                        .HasColumnType("text")
                        .HasColumnName("platform");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Users.UserLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("RankingId")
                        .HasColumnType("text")
                        .HasColumnName("ranking_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_level");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_level_user_id");

                    b.ToTable("user_level", (string)null);
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Level", b =>
                {
                    b.HasOne("BSChallenger.Server.Models.API.Rankings.Ranking", "Ranking")
                        .WithMany("Levels")
                        .HasForeignKey("RankingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_level_rankings_ranking_id");

                    b.Navigation("Ranking");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Maps.Map", b =>
                {
                    b.HasOne("BSChallenger.Server.Models.API.Level", "Level")
                        .WithMany("AvailableForPass")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_map_level_level_id");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Maps.MapFeature", b =>
                {
                    b.HasOne("BSChallenger.Server.Models.API.Maps.Map", null)
                        .WithMany("Features")
                        .HasForeignKey("MapId")
                        .HasConstraintName("fk_map_feature_map_map_id");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Rankings.RankTeamMember", b =>
                {
                    b.HasOne("BSChallenger.Server.Models.API.Rankings.Ranking", "Ranking")
                        .WithMany("RankTeamMembers")
                        .HasForeignKey("RankingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rank_team_member_rankings_ranking_id");

                    b.HasOne("BSChallenger.Server.Models.API.Users.User", "User")
                        .WithMany("AssignedRankings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rank_team_member_users_user_id");

                    b.Navigation("Ranking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Scan.ScanHistory", b =>
                {
                    b.HasOne("BSChallenger.Server.Models.API.Users.User", "User")
                        .WithMany("ScanHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_scan_history_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Scan.ScoreData", b =>
                {
                    b.HasOne("BSChallenger.Server.Models.API.Maps.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .HasConstraintName("fk_score_data_map_map_id");

                    b.HasOne("BSChallenger.Server.Models.API.Scan.ScanHistory", "ScanHistory")
                        .WithMany("Scores")
                        .HasForeignKey("ScanHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_score_data_scan_history_scan_history_id");

                    b.Navigation("Map");

                    b.Navigation("ScanHistory");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Users.UserLevel", b =>
                {
                    b.HasOne("BSChallenger.Server.Models.API.Users.User", "User")
                        .WithMany("UserLevels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_level_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Level", b =>
                {
                    b.Navigation("AvailableForPass");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Maps.Map", b =>
                {
                    b.Navigation("Features");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Rankings.Ranking", b =>
                {
                    b.Navigation("Levels");

                    b.Navigation("RankTeamMembers");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Scan.ScanHistory", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("BSChallenger.Server.Models.API.Users.User", b =>
                {
                    b.Navigation("AssignedRankings");

                    b.Navigation("ScanHistory");

                    b.Navigation("UserLevels");
                });
#pragma warning restore 612, 618
        }
    }
}
